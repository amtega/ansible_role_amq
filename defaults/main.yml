---
# Role default lower priority variables

# AMQ version to install

amq_version: 7.3.0

# Unix user and group used to run AMQ service

amq_user: amq-broker
amq_group: amq-broker

# Broker instance name

amq_broker_name: broker
amq_broker_fqdn: "{{ ansible_facts.fqdn }}"

# Base amq directory

amq_base_dir: /opt/redhat/amq-broker

# Install directory

amq_install_dir: "{{ amq_base_dir }}/install/amq-broker-{{ amq_version }}"

# Maximum number of processes for AMQ process. Keep in mind that this
# limit must also be set via ulimit, as this value will only be added to systemd
# unit
# Valid values: "unlimited" or number

amq_limit_nproc: unlimited


# Maximum number of file descriptors for AMQ process. Keep in mind that this
# limit must also be set via ulimit, as this value will only be added to systemd
# unit
# Valid values: "unlimited" or number

amq_limit_no_file: unlimited

# Brokers directory

amq_brokers_dir: "{{ amq_base_dir }}/brokers"

# Broker data directory

amq_broker_data_dir: "{{ amq_brokers_dir }}/data"

# Aditional java options
# üìÇ etc/artemis.profile ‚Üí JAVA_ARGS (merged)
#         amq_broker_java_options:
#           -
#             param: "-Xmx"
#             value: "8G"
#             # Result: -Xmx8G
#           -
#             param: "-Turbo="
#             value: "FULL"
#             # Result: -Turbo=FULL
#           -
#             param: "-Dhawtio.realm="
#             # Result: Erases -Dhawtio.realm=*

amq_broker_java_options: ""

# Primary admin user and role for the AMQ broker

amq_broker_admin:
  name: admin
  password: password
  role: admin

# List of strings with AMQ borker admin groups
# üìÇ etc/management.xml ‚Üí xpath:
#   /management-context/authorisation/default-access/access/@roles
#   /management-context/authorisation/role-access/match/access/@roles

amq_broker_admin_groups: []

# List of dicts with the AMQ broker users. The format of the dicts is the
# following:
#
# - name: <username>
#   password: <password>
#   role: <role>

amq_broker_users: []

# Related to etc/broker.xml in xpath /configuration/core/security-settings


amq_broker_security_settings:
  - address: "#"
    permissions:
      createNonDurableQueue:
        - admin
      deleteNonDurableQueue:
        - admin
      createDurableQueue:
        - admin
      deleteDurableQueue:
        - admin
      createAddress:
        - admin
      deleteAddress:
        - admin
      consume:
        - admin
      browse:
        - admin
      send:
        - admin
      manage:
        - admin

# üìÇ etc/broker.xml ‚Üí xpath /configuration/core/addresses
# moved to an include:
#   üìÇ etc/broker_addresses.xml ‚Üí xpath /addresses
#
# ‚ö†Ô∏è Not all configuration options implemented, only:
#
# amq_broker_addresses:
#   - name: EjemploQueue
#     routing: anycast
#     queues:
#       - name: EjemploQueue
#         durable: yes
#         max_consumers: 10
#
#   - name: EjemploTopic
#     routing: multicast

amq_broker_addresses:
  - name: DLQ
    routing: anycast
    queues:
      - name: DLQ
  - name: ExpiryQueue
    routing: anycast
    queues:
      - name: ExpiryQueue

# Clustering settings

amq_broker_cluster: yes
amq_broker_cluster_user: user_rhamq
amq_broker_cluster_password: password_rhamq
amq_broker_cluster_maxhops: 0
amq_broker_cluster_load_balancing_policy: ON_DEMAND
amq_broker_cluster_discovery: no
amq_broker_replication_enabled: no
amq_broker_is_replica: no
amq_broker_shared_store: yes
amq_cluster_name: my-cluster
# amq_cluster_retry_interval: 500
# amq_cluster_use_duplicate_detection: yes
amq_cluster_message_load_balancing: STRICT
amq_cluster_max_hops: 1

# Jolokia settings

amq_jolokia_allowed_origins:
  - "*://localhost*"
  - "*://{{ ansible_facts.fqdn }}*"
  - "*://{{ ansible_default_ipv4.address }}*"

amq_jolokia_strict_checking: yes

# Web

# With artemis create --http-host configurates web bindings in
# etc/bootstrap.xml ‚Üí xpath:/broker/web/@bind= ...
amq_broker_http_host_bindings: "{{ ansible_facts.hostname }}"

# Jgroups settings
amq_jgroups_enabled: no
amq_jgroups_channel: active_broadcast_channel
amq_jgroups_connector_ref: artemis
amq_jgroups_refresh_timeout: "10000"

# Queues settings

amq_broker_paging: yes

# Related to etc/broker.xml in xpath:
# /configuration/core/address-settings/address-setting[@match="#"]/auto-create-queues=true
# /configuration/core/address-settings/address-setting[@match="#"]/auto-create-addresses=true
# /configuration/core/address-settings/address-setting[@match="#"]/auto-create-jms-queues=true
# /configuration/core/address-settings/address-setting[@match="#"]/auto-create-jms-topics=true
amq_broker_enable_destination_autocreate: no

amq_broker_queues: []


# ASYNCIO settings

amq_broker_aio: yes
amq_broker_journal_max_io: 500

# Thread settings

amq_broker_thread_pool_max_size: 30
amq_broker_scheduled_thread_pool_max_size: 5

# Nio settings

amq_broker_nio: no
amq_broker_nioRemotingThreads: -1
amq_broker_amqpLowCredits: 30


# TLS settings

amq_broker_tls: no
amq_broker_tls_keystore:
amq_broker_tls_keystore_password:
amq_broker_tls_mutual_authentication: no
amq_broker_tls_truststore:
amq_broker_tls_truststore_password:

# Protocol settings

amq_broker_disable_amqp_protocol: no
amq_broker_disable_hornetq_protocol: yes
amq_broker_disable_mqtt_protocol: yes
amq_broker_disable_stomp_protocol: yes

# Port assignments

amq_artemis_port: 61616
amq_amqp_port: 5672
amq_stomp_port: 61613
amq_hornetq_port: 5445
amq_mqtt_port: 1833
amq_http_admin_port: 8161
  # HTTP Server http://hostname:8161
  # Artemis Jolokia http://hostname:8161/console/jolokia
  # Artemis Console http://hostname:8161/console


# Additional broker settings

amq_broker_address_setting_redelivery_delay: 500
# broker.xml:/configuration/core/global-max-size=2GB
# amq_broker_global_max_size = amq_broker_java_options.param Xmx / 4
amq_broker_global_max_size: 2G
amq_broker_security_invalidation_interval: 3600000

# Login settings

amq_broker_login:
  debug: no
  connectionURL: ldap://ldap.example.local:3268
  connectionUsername: cn=amqLdapUser,ou=CorporateUsers,dc=example,dc=local
  connectionPassword: "*******************"
  connectionProtocol: s
  authentication: simple
  userBase: dc=example,dc=local
  userSearchMatching: "(&(sAMAccountName={0})(objectclass=user))"
  userSearchSubtree: yes
  roleBase: dc=example,dc=local
  roleName: cn
  roleSearchMatching: "(&(member={0})(objectclass=group))"
  roleSearchSubtree: yes
  referral: follow
  reload: yes

# Install Artifact
#
# Point `amq_artifact` to a repository that contains the install artifact.
#
# Take a look to `amtega.artifact` role documentation to known about supported
# types of artifacts, their specific settings and how to configure a proxy if
# necessary
#
# The artifact attributes owner, group, dest, unarchive, unarchive_creates,
# version state and no_log will be ignored

amq_artifact:
  id: amq
  type: gitlab
  host: https://gitlab.example.local
  path: /redhat/amq
  file: "amq-broker-{{ amq_version }}-bin.zip"
  project: ansible/dml
  branch: master
  password: gitlab_password
  username: gitlab_user
  validate_certs: no

# Hide sensitive information

amq_no_log: yes
